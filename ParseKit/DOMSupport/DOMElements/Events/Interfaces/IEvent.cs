using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace ParseKit.DOMElements._Classes.Events
{
    class EventPhase
    {
        /// <summary>
        /// The current event is not being dispatched, i.e., 
        /// the Event.eventPhase is being observered prior to calling EventTarget.dispatchEvent() or following the completion of the event phases of a given Event.
        /// </summary>
        public static short NONE = 0;
        /// <summary>
        /// The current event is in the target phase, i.e., 
        /// it is being evaluated at the event target.
        /// </summary>
        public static short CAPTURING_PHASE = 1;
        /// <summary>
        /// The current event phase is the bubbling phase.
        /// </summary>
        public static short AT_TARGET = 2;
        /// <summary>
        /// The current event phase is the capture phase.
        /// </summary>
        public static short BUBBLING_PHASE = 3;
    }

    interface IEvent
    {
         //IEvent(string type, EventInit init = null);

         string type { get;  }

        /// <summary>
         /// Used to retrieve the event target associated with the Event dispatch and DOM event flow.
        /// </summary>
         IEventTarget? target { get;  }
         IEventTarget? currentTarget { get;  }

         short eventPhase { get;  }

         void stopPropagation();
         void stopImmediatePropagation();

         bool bubbles { get;  }
         bool cancelable { get;  }
         void preventDefault();
         bool defaultPrevented { get;  }

         /// <summary>
         /// Used to indicate whether this event was generated by the user agent (trusted) or by script (untrusted).
         /// </summary>
         bool isTrusted { get;  }
         TimeSpan timeStamp { get;  }

        void initEvent(string type, bool bubbles, bool cancelable);
    }

    class EventInit
    {
        public bool bubbles = false;
        public bool cancelable = false;
    }
}
